# =============================================================================
# Terraform Lint Workflow Example (Enhanced with Artifact Management)
# =============================================================================
#
# This is a sample GitHub Actions workflow that demonstrates how to use the
# Terraform Scripts Lint Tool in your CI/CD pipeline with enhanced features.
#
# NEW FEATURES INCLUDED:
# - Robust artifact management preventing naming conflicts
# - JSON and text report format support
# - Matrix job strategies with unique artifact naming
# - Advanced error handling and fallback mechanisms
#
# To use this workflow in your project:
# 1. Copy this file to your repository's .github/workflows/ directory
# 2. Rename it to something like 'terraform-lint.yml'
# 3. Modify the configuration according to your project needs
# 4. Choose the appropriate action reference (see below)
# 5. Commit and push to trigger the workflow
#
# =============================================================================

# SAMPLE WORKFLOW - COPY AND MODIFY FOR YOUR PROJECT
name: Terraform Lint (Enhanced Example)

# Trigger conditions - modify as needed for your project
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      report_format:
        description: 'Report format (text or json)'
        required: false
        default: 'text'
        type: choice
        options:
        - text
        - json

jobs:
  # Basic linting job with enhanced artifact management
  terraform-lint-basic:
    runs-on: ubuntu-latest
    name: Terraform Scripts Lint (Basic)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changed files detection

    # Example 1: Basic usage with enhanced artifact management
    - name: Run Terraform Lint (Basic)
      uses: ./                              # Use local action files
      with:
        directory: '.'                      # Check current directory
        fail-on-error: 'false'             # Don't fail workflow on errors (for demo)
        exclude-paths: 'examples/*'        # Exclude examples directory
        performance-monitoring: 'true'     # Enable performance monitoring
        report-format: ${{ github.event.inputs.report_format || 'text' }}

    # Note: Artifact upload is now handled automatically by the action
    # with unique naming to prevent conflicts

  # Matrix strategy example with enhanced artifact handling
  terraform-lint-matrix:
    runs-on: ubuntu-latest
    name: Matrix Lint Strategy
    strategy:
      matrix:
        format: ['text', 'json']
        category: ['ST', 'IO', 'DC', 'SC']
        include:
          # Add special combinations
          - format: 'json'
            category: 'ST,IO'
            name: 'style-and-io-combined'
          - format: 'text'
            category: 'ST,IO,DC,SC'
            name: 'all-categories'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Matrix job with automatic unique artifact naming
    - name: Lint ${{ matrix.category }} Rules (${{ matrix.format }})
      uses: ./
      with:
        directory: '.'
        rule-categories: ${{ matrix.category }}
        fail-on-error: 'false'
        report-format: ${{ matrix.format }}
        performance-monitoring: 'true'
        exclude-paths: 'examples/*,test/*'

    # The action automatically handles unique artifact naming for matrix jobs
    # Format: terraform-lint-report-unified-{run_id}-{run_attempt}-{job_id}-matrix-{matrix_index}-{timestamp}

  # Multi-environment testing with JSON reports
  multi-environment-lint:
    runs-on: ubuntu-latest
    name: Multi-Environment Lint
    strategy:
      matrix:
        environment: ['dev', 'staging', 'prod']
        format: ['text', 'json']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Environment-specific linting with format selection
    - name: Lint ${{ matrix.environment }} Environment (${{ matrix.format }})
      uses: ./
      with:
        include-paths: './environments/${{ matrix.environment }}'
        exclude-paths: '*.backup,*.tmp'
        fail-on-error: 'true'
        rule-categories: 'ST,IO,DC,SC'
        performance-monitoring: 'true'
        report-format: ${{ matrix.format }}

  # Changed files only with enhanced error handling
  changed-files-lint:
    runs-on: ubuntu-latest
    name: Changed Files Lint
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Lint on Changed Files (JSON Report)
      uses: ./
      with:
        directory: '.'
        changed-files-only: 'true'
        base-ref: 'origin/main'
        fail-on-error: 'false'              # Don't fail on errors for PR checks
        performance-monitoring: 'true'
        report-format: 'json'               # JSON for better parsing

    # Additional step to process JSON report
    - name: Process JSON Report
      if: always()
      run: |
        if [ -f terraform-lint-report.json ]; then
          echo "## 📊 Lint Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat terraform-lint-report.json | jq '.summary' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi

  # Parallel execution example with different formats
  parallel-lint-execution:
    runs-on: ubuntu-latest
    name: Parallel Lint Execution

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # First parallel job - Style checks with text report
    - name: Style Rules Check
      uses: ./
      with:
        directory: '.'
        rule-categories: 'ST'
        fail-on-error: 'false'
        report-format: 'text'
        exclude-paths: 'examples/*'

    # Second parallel job - I/O checks with JSON report
    - name: Input/Output Rules Check
      uses: ./
      with:
        directory: '.'
        rule-categories: 'IO'
        fail-on-error: 'false'
        report-format: 'json'
        include-paths: 'modules/*'

    # Third parallel job - Documentation checks
    - name: Documentation Rules Check
      uses: ./
      with:
        directory: '.'
        rule-categories: 'DC'
        fail-on-error: 'false'
        report-format: 'text'

  # Advanced artifact management test
  artifact-stress-test:
    runs-on: ubuntu-latest
    name: Artifact Management Stress Test
    strategy:
      matrix:
        test_case: [1, 2, 3, 4, 5]  # Simulate multiple rapid executions

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Rapid Fire Lint Test ${{ matrix.test_case }}
      uses: ./
      with:
        directory: '.'
        rule-categories: 'ST'
        fail-on-error: 'false'
        report-format: ${{ matrix.test_case % 2 == 0 && 'json' || 'text' }}

# =============================================================================
# Enhanced Configuration Examples
# =============================================================================

# Example workflow demonstrating advanced features:

# 1. COMPREHENSIVE QUALITY GATE WITH MULTIPLE FORMATS
# quality-gate:
#   runs-on: ubuntu-latest
#   steps:
#     # Generate text report for human review
#     - name: Human-Readable Report
#       uses: ./
#       with:
#         directory: './production'
#         fail-on-error: 'false'
#         rule-categories: 'ST,IO,DC,SC'
#         report-format: 'text'
#
#     # Generate JSON report for automated processing
#     - name: Machine-Readable Report
#       uses: ./
#       with:
#         directory: './production'
#         fail-on-error: 'true'
#         rule-categories: 'ST,IO,DC,SC'
#         report-format: 'json'

# 2. CUSTOM ARTIFACT PROCESSING
# process-reports:
#   needs: [terraform-lint-matrix]
#   runs-on: ubuntu-latest
#   steps:
#     # Download all artifacts for processing
#     - name: Download All Reports
#       uses: actions/download-artifact@v4
#       with:
#         pattern: terraform-lint-report-unified-*
#         path: ./reports
#
#     # Process and combine reports
#     - name: Combine Reports
#       run: |
#         echo "Processing all lint reports..."
#         find ./reports -name "*.json" -exec echo "Processing: {}" \;
#         find ./reports -name "*.json" -exec jq '.summary' {} \;

# 3. CONDITIONAL EXECUTION WITH ENHANCED FEATURES
# conditional-lint:
#   runs-on: ubuntu-latest
#   steps:
#     # Check for Terraform changes
#     - name: Check for changes
#       uses: dorny/paths-filter@v2
#       id: terraform-changes
#       with:
#         filters: |
#           terraform:
#             - '**/*.tf'
#             - '**/*.tfvars'
#
#     # Run enhanced lint only on changes
#     - name: Conditional Enhanced Lint
#       if: steps.terraform-changes.outputs.terraform == 'true'
#       uses: ./
#       with:
#         directory: '.'
#         changed-files-only: 'true'
#         report-format: 'json'
#         performance-monitoring: 'true'

# =============================================================================
# Artifact Management Benefits
# =============================================================================

# The enhanced action now provides:
#
# 1. AUTOMATIC UNIQUE NAMING
#    - Artifacts are automatically named with unique identifiers
#    - No manual intervention required for conflict resolution
#    - Supports matrix jobs, parallel execution, and rapid triggers
#
# 2. FALLBACK MECHANISMS
#    - Primary upload with enhanced naming
#    - Secondary fallback upload if primary fails
#    - Comprehensive error handling and recovery
#
# 3. MULTIPLE FORMAT SUPPORT
#    - Text reports for human consumption
#    - JSON reports for automated processing
#    - Both formats uploaded automatically
#
# 4. NAMING CONVENTION
#    Format: terraform-lint-report-unified-{run_id}-{run_attempt}-{job_id}-{timestamp}
#    Matrix: terraform-lint-report-unified-{run_id}-{run_attempt}-{job_id}-matrix-{index}-{timestamp}
#    Fallback: terraform-lint-report-unified-{run_id}-{timestamp}-fallback-{run_number}

# =============================================================================
# Performance Optimization Examples
# =============================================================================

# 1. CHANGED FILES OPTIMIZATION
# optimized-pr-check:
#   if: github.event_name == 'pull_request'
#   runs-on: ubuntu-latest
#   steps:
#     - uses: actions/checkout@v4
#       with:
#         fetch-depth: 0
#     - uses: ./
#       with:
#         changed-files-only: 'true'
#         base-ref: ${{ github.event.pull_request.base.sha }}
#         performance-monitoring: 'true'

# 2. PARALLEL CATEGORY PROCESSING
# parallel-categories:
#   strategy:
#     matrix:
#       category: ['ST', 'IO', 'DC']
#   runs-on: ubuntu-latest
#   steps:
#     - uses: actions/checkout@v4
#     - uses: ./
#       with:
#         rule-categories: ${{ matrix.category }}
#         performance-monitoring: 'true'
#         report-format: 'json'

# 3. SELECTIVE PATH PROCESSING
# selective-processing:
#   strategy:
#     matrix:
#       module: ['vpc', 'compute', 'storage', 'network']
#   runs-on: ubuntu-latest
#   steps:
#     - uses: actions/checkout@v4
#     - uses: ./
#       with:
#         include-paths: './modules/${{ matrix.module }}'
#         performance-monitoring: 'true'

# =============================================================================
# Integration Examples
# =============================================================================

# Example: Comment on PR with results
# comment-results:
#   needs: changed-files-lint
#   if: always() && github.event_name == 'pull_request'
#   runs-on: ubuntu-latest
#   steps:
#     - name: Download Reports
#       uses: actions/download-artifact@v4
#       with:
#         pattern: terraform-lint-report-unified-*
#         path: ./reports
#
#     - name: Comment PR
#       uses: actions/github-script@v7
#       with:
#         script: |
#           const fs = require('fs');
#           const path = require('path');
#           
#           // Find JSON reports
#           const jsonFiles = fs.readdirSync('./reports', { recursive: true })
#             .filter(f => f.endsWith('.json'));
#           
#           if (jsonFiles.length > 0) {
#             const report = JSON.parse(fs.readFileSync(path.join('./reports', jsonFiles[0])));
#             const summary = report.summary;
#             
#             const comment = `## 🔍 Terraform Lint Results
#             
#             | Metric | Count |
#             |--------|-------|
#             | Errors | ${summary.total_errors} |
#             | Warnings | ${summary.total_warnings} |
#             | Files | ${summary.files_processed} |
#             | Execution Time | ${summary.execution_time.toFixed(2)}s |
#             
#             ${summary.total_errors > 0 ? '❌ Issues found' : '✅ All checks passed'}`;
#             
#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: comment
#             });
#           }

# =============================================================================
# Troubleshooting Enhanced Features
# =============================================================================

# Issue: Artifact naming conflicts
# Solution: Now automatically resolved with unique naming

# Issue: Matrix jobs overwriting artifacts
# Solution: Matrix index included in artifact names

# Issue: Missing JSON reports
# Solution: Both text and JSON uploaded automatically

# Issue: Report processing failures
# Solution: Fallback mechanisms and error handling included

# Issue: Large repository performance
# Solution: Use changed-files-only, include-paths, or category filtering

# =============================================================================
# Available Enhanced Parameters
# =============================================================================

# NEW PARAMETERS:
# report-format: 'text' or 'json' (default: 'text')
#   - Controls output format for reports
#   - JSON format enables automated processing
#   - Both formats uploaded as artifacts automatically

# ENHANCED PARAMETERS:
# All existing parameters work with improved artifact management
# Automatic unique artifact naming prevents conflicts
# Enhanced error handling and fallback mechanisms

# =============================================================================
# Enhanced Outputs Reference
# =============================================================================

# All existing outputs plus:
# - Automatic artifact upload with unique naming
# - Both text and JSON reports available
# - Enhanced performance metrics in JSON format
# - Improved error handling and recovery

# =============================================================================
