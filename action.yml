name: 'Terraform Scripts Lint'
description: 'Comprehensive linting tool for Terraform scripts - checks code quality, formatting, and documentation'
author: 'DevOps Team'

branding:
  icon: 'check-circle'
  color: 'green'

inputs:
  directory:
    description: 'Target directory to check Terraform files'
    required: false
    default: '.'
  fail-on-error:
    description: 'Whether to fail the workflow when errors are found'
    required: false
    default: 'true'
  ignore-rules:
    description: 'Comma-separated list of rule IDs to ignore (e.g., ST.001,ST.003)'
    required: false
    default: ''
  include-paths:
    description: 'Comma-separated list of path patterns to include (e.g., modules/*,environments/*)'
    required: false
    default: ''
  exclude-paths:
    description: 'Comma-separated list of path patterns to exclude (e.g., examples/*,test/*)'
    required: false
    default: ''
  changed-files-only:
    description: 'If set to true, only check files changed in current commit/PR'
    required: false
    default: 'false'
  base-ref:
    description: 'Base reference for git diff when checking changed files (e.g., origin/main, HEAD~1)'
    required: false
    default: 'origin/main'

outputs:
  result:
    description: 'Lint result (success/failure)'
  error-count:
    description: 'Number of errors found'
  warning-count:
    description: 'Number of warnings found'
  report-file:
    description: 'Path to the generated lint report file'

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Validate Input Parameters
      shell: bash
      run: |
        echo "=== Input Parameters ==="
        echo "Directory: ${{ inputs.directory }}"
        echo "Fail on Error: ${{ inputs.fail-on-error }}"
        echo "Ignore Rules: ${{ inputs.ignore-rules }}"
        echo "Include Paths: ${{ inputs.include-paths }}"
        echo "Exclude Paths: ${{ inputs.exclude-paths }}"
        echo "Changed Files Only: ${{ inputs.changed-files-only }}"
        echo "Base Reference: ${{ inputs.base-ref }}"
        echo "========================"

    - name: Debug Environment
      shell: bash
      run: |
        echo "=== Environment Debug ==="
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "GITHUB_ACTION_PATH: $GITHUB_ACTION_PATH"
        echo "Current directory: $(pwd)"
        echo "Git status:"
        git status --porcelain || echo "Not a git repository or git not available"
        echo "Git log (last 2 commits):"
        git log --oneline -2 || echo "Git log not available"
        echo "========================"

    - name: Run Terraform Lint
      shell: bash
      run: |
        # Store the action path and user workspace
        ACTION_PATH="$GITHUB_ACTION_PATH"
        USER_WORKSPACE="$GITHUB_WORKSPACE"
        
        # Ensure we're in the user's workspace for git operations
        cd "$USER_WORKSPACE"
        
        # Build command with parameters
        CMD="python3 '$ACTION_PATH/.github/scripts/terraform_lint.py' --directory '${{ inputs.directory }}'"
        
        if [ -n "${{ inputs.ignore-rules }}" ]; then
          CMD="$CMD --ignore-rules '${{ inputs.ignore-rules }}'"
        fi
        
        if [ -n "${{ inputs.include-paths }}" ]; then
          CMD="$CMD --include-paths '${{ inputs.include-paths }}'"
        fi
        
        if [ -n "${{ inputs.exclude-paths }}" ]; then
          CMD="$CMD --exclude-paths '${{ inputs.exclude-paths }}'"
        fi
        
        if [ "${{ inputs.changed-files-only }}" = "true" ]; then
          CMD="$CMD --changed-files-only"
          
          if [ -n "${{ inputs.base-ref }}" ]; then
            CMD="$CMD --base-ref '${{ inputs.base-ref }}'"
          fi
        fi
        
        echo "Executing: $CMD"
        echo "Working directory: $(pwd)"
        eval $CMD
        
        # Store exit code for later use
        echo "LINT_EXIT_CODE=$?" >> $GITHUB_ENV

    - name: Generate Unique Artifact Name
      shell: bash
      run: |
        # Generate a unique artifact name using timestamp
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        ARTIFACT_NAME="terraform-lint-report-${{ github.run_id }}-${TIMESTAMP}-$$"
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
        echo "Generated artifact name: $ARTIFACT_NAME"

    - name: Upload Lint Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: terraform-lint-report.txt
        retention-days: 30

    - name: Set Outputs and Handle Results
      shell: bash
      run: |
        # Read the report file to get counts
        if [ -f "terraform-lint-report.txt" ]; then
          ERROR_COUNT=$(grep "Total Errors:" terraform-lint-report.txt | grep -o '[0-9]*' || echo "0")
          WARNING_COUNT=$(grep "Total Warnings:" terraform-lint-report.txt | grep -o '[0-9]*' || echo "0")
        else
          ERROR_COUNT=0
          WARNING_COUNT=0
        fi
        
        # Set outputs
        echo "error-count=$ERROR_COUNT" >> $GITHUB_OUTPUT
        echo "warning-count=$WARNING_COUNT" >> $GITHUB_OUTPUT
        echo "report-file=terraform-lint-report.txt" >> $GITHUB_OUTPUT
        
        # Determine result
        if [ "$LINT_EXIT_CODE" -eq 0 ]; then
          echo "result=success" >> $GITHUB_OUTPUT
          echo "✅ Terraform lint completed successfully"
        else
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "❌ Terraform lint found issues"
          
          # Fail the workflow if requested
          if [ "${{ inputs.fail-on-error }}" = "true" ]; then
            echo "Failing workflow due to lint errors"
            exit 1
          fi
        fi
