name: 'Terraform Scripts Lint (Unified System)'
description: 'Enhanced comprehensive linting tool for Terraform scripts using unified rules management system'
author: 'DevOps Team'

branding:
  icon: 'check-circle'
  color: 'green'

inputs:
  directory:
    description: 'Target directory to check Terraform files'
    required: false
    default: '.'
  fail-on-error:
    description: 'Whether to fail the workflow when errors are found'
    required: false
    default: 'true'
  ignore-rules:
    description: 'Comma-separated list of rule IDs to ignore (e.g., ST.001,ST.003)'
    required: false
    default: ''
  rule-categories:
    description: 'Comma-separated list of rule categories to execute (ST,IO,DC). Default: all categories'
    required: false
    default: 'ST,IO,DC'
  include-paths:
    description: 'Comma-separated list of path patterns to include (e.g., modules/*,environments/*)'
    required: false
    default: ''
  exclude-paths:
    description: 'Comma-separated list of path patterns to exclude (e.g., examples/*,test/*)'
    required: false
    default: ''
  changed-files-only:
    description: 'If set to true, only check files changed in current commit/PR'
    required: false
    default: 'false'
  base-ref:
    description: 'Base reference for git diff when checking changed files (e.g., origin/main, HEAD~1)'
    required: false
    default: 'origin/main'
  performance-monitoring:
    description: 'Enable detailed performance monitoring and analytics'
    required: false
    default: 'true'
  report-format:
    description: 'Output report format (text or json)'
    required: false
    default: 'text'

outputs:
  result:
    description: 'Lint result (success/failure)'
  error-count:
    description: 'Number of errors found'
  warning-count:
    description: 'Number of warnings found'
  violation-count:
    description: 'Total number of violations found'
  files-processed:
    description: 'Number of files processed'
  execution-time:
    description: 'Total execution time in seconds'
  rules-executed:
    description: 'Total number of rules executed'
  report-file:
    description: 'Path to the generated lint report file'
  performance-metrics:
    description: 'JSON string containing performance metrics'

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Validate Input Parameters
      shell: bash
      run: |
        echo "=== Enhanced Terraform Linter - Unified System ==="
        echo "Directory: ${{ inputs.directory }}"
        echo "Fail on Error: ${{ inputs.fail-on-error }}"
        echo "Ignore Rules: ${{ inputs.ignore-rules }}"
        echo "Rule Categories: ${{ inputs.rule-categories }}"
        echo "Include Paths: ${{ inputs.include-paths }}"
        echo "Exclude Paths: ${{ inputs.exclude-paths }}"
        echo "Changed Files Only: ${{ inputs.changed-files-only }}"
        echo "Base Reference: ${{ inputs.base-ref }}"
        echo "Performance Monitoring: ${{ inputs.performance-monitoring }}"
        echo "Report Format: ${{ inputs.report-format }}"
        echo "=================================================="

    - name: Debug Environment
      shell: bash
      run: |
        echo "=== Environment Debug ==="
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "GITHUB_ACTION_PATH: $GITHUB_ACTION_PATH"
        echo "Current directory: $(pwd)"
        echo "Git status:"
        git status --porcelain || echo "Not a git repository or git not available"
        echo "Git log (last 2 commits):"
        git log --oneline -2 || echo "Git log not available"
        echo "========================"

    - name: Verify Rules System
      shell: bash
      run: |
        echo "=== Verifying Unified Rules System ==="
        ACTION_PATH="$GITHUB_ACTION_PATH"
        
        # Check if rules directory exists
        if [ -d "$ACTION_PATH/rules" ]; then
          echo "✅ Rules directory found"
          echo "Rules structure:"
          ls -la "$ACTION_PATH/rules/"
          
          # Check for key files
          if [ -f "$ACTION_PATH/rules/__init__.py" ]; then
            echo "✅ Unified rules package found"
          else
            echo "❌ Unified rules package not found"
          fi
          
          if [ -f "$ACTION_PATH/rules/rules_manager.py" ]; then
            echo "✅ Rules manager found"
          else
            echo "❌ Rules manager not found"
          fi
        else
          echo "❌ Rules directory not found"
          exit 1
        fi
        echo "=================================="

    - name: Run Enhanced Terraform Lint
      shell: bash
      run: |
        # Store the action path and user workspace
        ACTION_PATH="$GITHUB_ACTION_PATH"
        USER_WORKSPACE="$GITHUB_WORKSPACE"
        
        # Ensure we're in the user's workspace for git operations
        cd "$USER_WORKSPACE"
        
        # Build command with enhanced parameters
        CMD="python3 '$ACTION_PATH/.github/scripts/terraform_lint.py' --directory '${{ inputs.directory }}'"
        
        # Add rule filtering options
        if [ -n "${{ inputs.ignore-rules }}" ]; then
          CMD="$CMD --ignore-rules '${{ inputs.ignore-rules }}'"
        fi
        
        if [ -n "${{ inputs.rule-categories }}" ]; then
          CMD="$CMD --categories '${{ inputs.rule-categories }}'"
        fi
        
        # Add path filtering options
        if [ -n "${{ inputs.include-paths }}" ]; then
          CMD="$CMD --include-paths '${{ inputs.include-paths }}'"
        fi
        
        if [ -n "${{ inputs.exclude-paths }}" ]; then
          CMD="$CMD --exclude-paths '${{ inputs.exclude-paths }}'"
        fi
        
        # Add git diff options
        if [ "${{ inputs.changed-files-only }}" = "true" ]; then
          CMD="$CMD --changed-files-only"
          
          if [ -n "${{ inputs.base-ref }}" ]; then
            CMD="$CMD --base-ref '${{ inputs.base-ref }}'"
          fi
        fi
        
        # Add performance monitoring
        if [ "${{ inputs.performance-monitoring }}" = "true" ]; then
          CMD="$CMD --performance-monitoring"
        fi
        
        # Add report format
        if [ -n "${{ inputs.report-format }}" ]; then
          CMD="$CMD --report-format '${{ inputs.report-format }}'"
        fi
        
        echo "Executing enhanced linter: $CMD"
        echo "Working directory: $(pwd)"
        
        # Execute the enhanced linter
        eval $CMD
        
        # Store exit code for later use
        echo "LINT_EXIT_CODE=$?" >> $GITHUB_ENV

    - name: Parse Enhanced Report
      shell: bash
      run: |
        # Parse the enhanced report for detailed metrics
        if [ -f "terraform-lint-report.txt" ]; then
          echo "=== Parsing Enhanced Report ==="
          
          # Extract basic counts
          ERROR_COUNT=$(grep "Total Errors:" terraform-lint-report.txt | grep -o '[0-9]*' || echo "0")
          WARNING_COUNT=$(grep "Total Warnings:" terraform-lint-report.txt | grep -o '[0-9]*' || echo "0")
          VIOLATION_COUNT=$(grep "Total Violations:" terraform-lint-report.txt | grep -o '[0-9]*' || echo "0")
          FILES_PROCESSED=$(grep "Files Processed:" terraform-lint-report.txt | grep -o '[0-9]*' || echo "0")
          EXECUTION_TIME=$(grep "Execution Time:" terraform-lint-report.txt | grep -o '[0-9]*\.[0-9]*' || echo "0.0")
          RULES_EXECUTED=$(grep "Total Rules Executed:" terraform-lint-report.txt | grep -o '[0-9]*' || echo "0")
          
          # Store metrics in environment
          echo "ERROR_COUNT=$ERROR_COUNT" >> $GITHUB_ENV
          echo "WARNING_COUNT=$WARNING_COUNT" >> $GITHUB_ENV
          echo "VIOLATION_COUNT=$VIOLATION_COUNT" >> $GITHUB_ENV
          echo "FILES_PROCESSED=$FILES_PROCESSED" >> $GITHUB_ENV
          echo "EXECUTION_TIME=$EXECUTION_TIME" >> $GITHUB_ENV
          echo "RULES_EXECUTED=$RULES_EXECUTED" >> $GITHUB_ENV
          
          # Extract performance metrics for JSON output
          FILES_PER_SECOND=$(grep "Files per Second:" terraform-lint-report.txt | \
            grep -o '[0-9]*\.[0-9]*' || echo "0.0")
          LINES_PER_SECOND=$(grep "Lines per Second:" terraform-lint-report.txt | \
            grep -o '[0-9,]*' | tr -d ',' || echo "0")
          RULES_PER_SECOND=$(grep "Rules per Second:" terraform-lint-report.txt | \
            grep -o '[0-9]*\.[0-9]*' || echo "0.0")
          
          # Create performance metrics JSON
          PERFORMANCE_JSON="{\"files_per_second\":$FILES_PER_SECOND,\"lines_per_second\":$LINES_PER_SECOND"
          PERFORMANCE_JSON="${PERFORMANCE_JSON},\"rules_per_second\":$RULES_PER_SECOND"
          PERFORMANCE_JSON="${PERFORMANCE_JSON},\"execution_time\":$EXECUTION_TIME"
          PERFORMANCE_JSON="${PERFORMANCE_JSON},\"files_processed\":$FILES_PROCESSED"
          PERFORMANCE_JSON="${PERFORMANCE_JSON},\"rules_executed\":$RULES_EXECUTED}"
          echo "PERFORMANCE_METRICS=$PERFORMANCE_JSON" >> $GITHUB_ENV
          
          echo "📊 Enhanced Metrics Extracted:"
          echo "  - Errors: $ERROR_COUNT"
          echo "  - Warnings: $WARNING_COUNT"
          echo "  - Violations: $VIOLATION_COUNT"
          echo "  - Files: $FILES_PROCESSED"
          echo "  - Execution Time: ${EXECUTION_TIME}s"
          echo "  - Rules Executed: $RULES_EXECUTED"
          echo "  - Performance: $FILES_PER_SECOND files/sec, $RULES_PER_SECOND rules/sec"
          
        else
          echo "❌ Report file not found"
          echo "ERROR_COUNT=0" >> $GITHUB_ENV
          echo "WARNING_COUNT=0" >> $GITHUB_ENV
          echo "VIOLATION_COUNT=0" >> $GITHUB_ENV
          echo "FILES_PROCESSED=0" >> $GITHUB_ENV
          echo "EXECUTION_TIME=0.0" >> $GITHUB_ENV
          echo "RULES_EXECUTED=0" >> $GITHUB_ENV
          echo "PERFORMANCE_METRICS={}" >> $GITHUB_ENV
        fi

    - name: Generate Unique Artifact Name
      shell: bash
      run: |
        # Generate a unique artifact name using timestamp, run details and job info
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        JOB_ID="${{ github.job }}"
        RUN_ID="${{ github.run_id }}"
        RUN_ATTEMPT="${{ github.run_attempt }}"
        
        # Sanitize JOB_ID (remove spaces and special characters)
        JOB_ID_CLEAN=$(echo "$JOB_ID" | tr ' ' '-' | tr -d '[:punct:]' | tr '[:upper:]' '[:lower:]')
        
        # Create base name with fallback
        BASE_NAME="terraform-lint-report-unified"
        
        # Add run and job identifiers with fallbacks
        UNIQUE_SUFFIX="${RUN_ID:-unknown}-${RUN_ATTEMPT:-1}-${JOB_ID_CLEAN:-default}"
        
        # Add matrix suffix if this is a matrix job
        MATRIX_KEY="${{ strategy.job-index }}"
        if [ -n "$MATRIX_KEY" ] && [ "$MATRIX_KEY" != "null" ] && [ "$MATRIX_KEY" != "" ]; then
          UNIQUE_SUFFIX="${UNIQUE_SUFFIX}-matrix-${MATRIX_KEY}"
        fi
        
        # Add timestamp for final uniqueness
        ARTIFACT_NAME="${BASE_NAME}-${UNIQUE_SUFFIX}-${TIMESTAMP}"
        
        # Ensure artifact name is not empty and is valid
        if [ -z "$ARTIFACT_NAME" ] || [ "$ARTIFACT_NAME" = "-" ]; then
          ARTIFACT_NAME="terraform-lint-report-fallback-$(date +%s)"
        fi
        
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
        echo "Generated unique artifact name: $ARTIFACT_NAME"
        
        # Also create a shorter name for reference
        SHORT_NAME="${BASE_NAME}-${RUN_ID:-unknown}-${TIMESTAMP}"
        echo "SHORT_ARTIFACT_NAME=$SHORT_NAME" >> $GITHUB_ENV
        
        # Debug output
        echo "Debug artifact name generation:"
        echo "  BASE_NAME: $BASE_NAME"
        echo "  RUN_ID: $RUN_ID"
        echo "  RUN_ATTEMPT: $RUN_ATTEMPT"
        echo "  JOB_ID: $JOB_ID"
        echo "  JOB_ID_CLEAN: $JOB_ID_CLEAN"
        echo "  MATRIX_KEY: $MATRIX_KEY"
        echo "  TIMESTAMP: $TIMESTAMP"
        echo "  FINAL ARTIFACT_NAME: $ARTIFACT_NAME"

    - name: Upload Enhanced Lint Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ env.ARTIFACT_NAME || 'terraform-lint-report-default' }}
        path: |
          terraform-lint-report.txt
          terraform-lint-report.json
        retention-days: 30
        if-no-files-found: warn
        compression-level: 6
      continue-on-error: true
      id: upload-primary

    - name: Upload Report with Fallback Name
      uses: actions/upload-artifact@v4
      if: always() && (steps.upload-primary.outcome == 'failure' || env.ARTIFACT_NAME == '')
      with:
        name: terraform-lint-report-fallback-${{ github.run_number }}-${{ github.run_attempt }}
        path: |
          terraform-lint-report.txt
          terraform-lint-report.json
        retention-days: 30
        if-no-files-found: warn
        compression-level: 6
      continue-on-error: true

    - name: Create Summary Report
      shell: bash
      if: always()
      run: |
        # Create a GitHub Actions summary
        echo "## 🔍 Terraform Lint Report (Unified System)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Errors | $ERROR_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| Warnings | $WARNING_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| Total Violations | $VIOLATION_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| Files Processed | $FILES_PROCESSED |" >> $GITHUB_STEP_SUMMARY
        echo "| Rules Executed | $RULES_EXECUTED |" >> $GITHUB_STEP_SUMMARY
        echo "| Execution Time | ${EXECUTION_TIME}s |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add performance metrics if available
        if [ "${{ inputs.performance-monitoring }}" = "true" ]; then
          echo "### ⚡ Performance Metrics" >> $GITHUB_STEP_SUMMARY
          FILES_PER_SEC=$(echo $PERFORMANCE_METRICS | grep -o '"files_per_second":[0-9.]*' | cut -d: -f2)
          RULES_PER_SEC=$(echo $PERFORMANCE_METRICS | grep -o '"rules_per_second":[0-9.]*' | cut -d: -f2)
          echo "- **Processing Speed**: ${FILES_PER_SEC} files/second" >> $GITHUB_STEP_SUMMARY
          echo "- **Rule Execution**: ${RULES_PER_SEC} rules/second" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add configuration details
        echo "### ⚙️ Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Directory**: \`${{ inputs.directory }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Rule Categories**: \`${{ inputs.rule-categories }}\`" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ inputs.ignore-rules }}" ]; then
          echo "- **Ignored Rules**: \`${{ inputs.ignore-rules }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        if [ "${{ inputs.changed-files-only }}" = "true" ]; then
          echo "- **Mode**: Changed files only (base: \`${{ inputs.base-ref }}\`)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add result status
        if [ "$LINT_EXIT_CODE" -eq 0 ]; then
          echo "### ✅ Result: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "All checks passed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Result: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "Issues found. Please check the detailed report." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Set Enhanced Outputs and Handle Results
      shell: bash
      run: |
        # Set all outputs with enhanced metrics
        echo "error-count=$ERROR_COUNT" >> $GITHUB_OUTPUT
        echo "warning-count=$WARNING_COUNT" >> $GITHUB_OUTPUT
        echo "violation-count=$VIOLATION_COUNT" >> $GITHUB_OUTPUT
        echo "files-processed=$FILES_PROCESSED" >> $GITHUB_OUTPUT
        echo "execution-time=$EXECUTION_TIME" >> $GITHUB_OUTPUT
        echo "rules-executed=$RULES_EXECUTED" >> $GITHUB_OUTPUT
        echo "report-file=terraform-lint-report.txt" >> $GITHUB_OUTPUT
        echo "performance-metrics=$PERFORMANCE_METRICS" >> $GITHUB_OUTPUT
        
        # Determine result
        if [ "$LINT_EXIT_CODE" -eq 0 ]; then
          echo "result=success" >> $GITHUB_OUTPUT
          echo "✅ Enhanced Terraform lint completed successfully"
          echo "📊 Processed $FILES_PROCESSED files with $RULES_EXECUTED rule executions in ${EXECUTION_TIME}s"
        else
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "❌ Enhanced Terraform lint found issues"
          echo "📊 Found $ERROR_COUNT errors, $WARNING_COUNT warnings, $VIOLATION_COUNT total violations"
          
          # Fail the workflow if requested
          if [ "${{ inputs.fail-on-error }}" = "true" ]; then
            echo "Failing workflow due to lint errors"
            exit 1
          fi
        fi
